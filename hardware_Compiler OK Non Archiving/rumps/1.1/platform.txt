
# RUMPS401 Core and platform.
# ------------------------------
#
# 

name=Quaduino ARM (32-bits) Boards #shown on board menu
version=1.0

# RUMPS compile variables
# ----------------------

compiler.warning_flags=-w
compiler.warning_flags.none=-w
compiler.warning_flags.default=
compiler.warning_flags.more=-Wall
compiler.warning_flags.all=-Wall -Wextra

#compiler.path={runtime.tools.arm-none-eabi-gcc.path}/bin/
compiler.path={runtime.hardware.path}\..\..\tools\arm-none-eabi-gcc/4.8.3-2014q1/bin/
compiler.c.cmd=arm-none-eabi-gcc
compiler.c.flags=-mcpu={build.mcu} -mthumb -c -g -Os {compiler.warning_flags} -std=gnu11 -ffunction-sections -fdata-sections -nostdlib --param max-inline-insns-single=500 -MMD
compiler.c.elf.cmd=arm-none-eabi-gcc
compiler.c.elf.flags=-Os -Wl,--gc-sections -save-temps
compiler.S.cmd=arm-none-eabi-gcc
compiler.S.flags=-c -g -x assembler-with-cpp -MMD
compiler.cpp.cmd=arm-none-eabi-g++
compiler.cpp.flags=-mcpu={build.mcu} -mthumb -c -g -Os {compiler.warning_flags} -std=gnu++11 -ffunction-sections -fdata-sections -fno-threadsafe-statics -nostdlib --param max-inline-insns-single=500 -fno-rtti -fno-exceptions -MMD
compiler.ar.cmd=arm-none-eabi-ar
compiler.ar.flags=rcs
compiler.objcopy.cmd=arm-none-eabi-objcopy
compiler.objcopy.eep.flags=-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0
compiler.elf2hex.bin.flags=-O binary
compiler.elf2hex.hex.flags=-O ihex -R .eeprom
compiler.elf2hex.cmd=arm-none-eabi-objcopy
compiler.ldflags=-mcpu={build.mcu} -mthumb -Wl,--cref -Wl,--check-sections -Wl,--gc-sections -Wl,--unresolved-symbols=report-all -Wl,--warn-common -Wl,--warn-section-align
compiler.size.cmd=arm-none-eabi-size
compiler.define=-DARDUINO=
compiler.readelf.cmd=arm-none-eabi-readelf

# This can be overridden in boards.txt
build.extra_flags=

# These can be overridden in platform.local.txt
compiler.c.extra_flags=
compiler.c.elf.extra_flags=
compiler.cpp.extra_flags=
compiler.S.extra_flags=
compiler.ar.extra_flags=
compiler.elf2hex.extra_flags=

#compiler.arm.cmsis.c.flags="-I{runtime.tools.CMSIS-4.5.0.path}/CMSIS/Include/" "-I{runtime.tools.CMSIS-Atmel-1.1.0.path}/CMSIS/Device/ATMEL/"
#compiler.arm.cmsis.c.flags="-I{runtime.tools.CMSIS-4.5.0.path}/CMSIS/Include/" "-I{runtime.platform.path}/variant/{build.variant}/"
compiler.arm.cmsis.c.flags="-I{runtime.hardware.path}/system/CMSIS/CMSIS/Include/" "-I{runtime.platform.path}/variant/{build.variant}/"
#compiler.arm.cmsis.ldflags="-L{runtime.tools.CMSIS-4.5.0.path}/CMSIS/Lib/GCC/" -larm_cortexM0l_math
compiler.arm.cmsis.ldflags=

#compiler.libsam.c.flags="-I{build.system.path}/libsam" "-I{build.system.path}/CMSIS/CMSIS/Include/" "-I{build.system.path}/CMSIS/Device/ATMEL/"


# USB Flags
# ---------
#build.usb_flags=-DUSB_VID={build.vid} -DUSB_PID={build.pid} -DUSBCON '-DUSB_MANUFACTURER={build.usb_manufacturer}' '-DUSB_PRODUCT={build.usb_product}'

# Default usb manufacturer will be replaced at compile time using
# numeric vendor ID if available or by board's specific value.
#build.usb_manufacturer="Unknown"


# RUMPS compile patterns
# ---------------------

## Compile c files
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.c.flags} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_RUMPS {compiler.c.extra_flags} {build.extra_flags} {compiler.arm.cmsis.c.flags} {includes} "{source_file}" -o "{object_file}"

## Compile c++ files
recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_RUMPS {compiler.cpp.extra_flags} {build.extra_flags} {compiler.arm.cmsis.c.flags} {includes} "{source_file}" -o "{object_file}"

## Compile S files
recipe.S.o.pattern="{compiler.path}{compiler.S.cmd}" {compiler.S.flags} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_RUMPS {compiler.S.extra_flags} {build.extra_flags} {compiler.arm.cmsis.c.flags} {includes} "{source_file}" -o "{object_file}"

## Create archives
# archive_file_path is needed for backwards compatibility with IDE 1.6.5 or older, IDE 1.6.6 or newer overrides this value
archive_file_path={build.path}/{archive_file}
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} {compiler.ar.extra_flags} "{archive_file_path}" "{object_file}"

## Combine gc-sections, archives, and objects
recipe.c.combine.pattern="{compiler.path}{compiler.c.elf.cmd}"  "-L{build.path}" {compiler.c.elf.flags} {compiler.c.elf.extra_flags} "-T{build.variant.path}/{build.ldscript}" "-Wl,-Map,{build.path}/{build.project_name}.map" --specs=nano.specs --specs=nosys.specs {compiler.ldflags} -o "{build.path}/{build.project_name}.elf" {object_files} -Wl,--start-group {compiler.arm.cmsis.ldflags} "-L{build.variant.path}" -lm "{build.path}/{archive_file}" -Wl,--end-group

## Create output (.bin file)
recipe.objcopy.bin.pattern="{compiler.path}{compiler.elf2hex.cmd}" {compiler.elf2hex.bin.flags} {compiler.elf2hex.extra_flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.bin"

## Create output (hex file)
recipe.objcopy.hex.pattern="{compiler.path}{compiler.elf2hex.cmd}" {compiler.elf2hex.hex.flags} {compiler.elf2hex.extra_flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.hex"

## Save hex
recipe.output.tmp_file={build.project_name}.{build.preferred_out_format}
recipe.output.save_file={build.project_name}.{build.variant}.{build.preferred_out_format}

## Compute size
recipe.size.pattern="{compiler.path}{compiler.size.cmd}" -A "{build.path}/{build.project_name}.elf"
recipe.size.regex=\.text\s+([0-9]+).*

# RUMPS flash tool
# ------------------------------

tools.rumpstool.cmd=rumpstool
tools.rumpstool.cmd.windows=rumpstool.exe
tools.rumpstool.path={runtime.hardware.path}\..\..\tools\rumpstool\1.0
tools.rumpstool.path_p={runtime.hardware.path}\..\..\tools\rumpstool\1.0

tools.rumpstool.upload.protocol=esp
tools.rumpstool.upload.params.verbose=-vv
tools.rumpstool.upload.params.quiet=
#tools.rumpstool.upload.pattern="{path}/{cmd}" -po "{serial.port}" -pa "{build.path}" -pn "{build.project_name}.bin" -op "{path}"
tools.rumpstool.upload.pattern="{path}/{cmd}" -po "{serial.port}" -pa "{build.path}" -pn "main0.bin" -op "{build.path}"

# Preprocessor hooks
# ------------------------------

rumpsduino.compile.param=rumps_compile_param.txt
rumpsduino.ctrl_param=rumps_runlog.txt
rumpsduino.exec_time=rumps_exectime.txt

# write compile parameters to a file - for each core's compilation
recipe.hooks.sketch.prebuild.01.pattern.windows=cmd.exe /C @echo ide.hardware.path={runtime.ide.path}\hardware>> "{runtime.platform.path}\{rumpsduino.compile.param}"
#recipe.hooks.sketch.prebuild.02.pattern.windows=cmd.exe /C @echo local.arduino.packages={build.path}\..\..\Arduino15\packages>> "{runtime.platform.path}\{rumpsduino.compile.param}"
recipe.hooks.sketch.prebuild.02.pattern.windows=cmd.exe /C @echo local.arduino.packages=%LOCALAPPDATA%\Arduino15\packages>> "{runtime.platform.path}\{rumpsduino.compile.param}"
recipe.hooks.sketch.prebuild.03.pattern.windows=cmd.exe /C @echo rumpsduino1_0.hardware.path={runtime.hardware.path}\..>> "{runtime.platform.path}\{rumpsduino.compile.param}"
recipe.hooks.sketch.prebuild.04.pattern.windows=cmd.exe /C @echo ide.tools.builder={runtime.ide.path}\tools-builder>> "{runtime.platform.path}\{rumpsduino.compile.param}"
recipe.hooks.sketch.prebuild.05.pattern.windows=cmd.exe /C @echo ide.tools.avr={tools.avrdude.path}>> "{runtime.platform.path}\{rumpsduino.compile.param}"
recipe.hooks.sketch.prebuild.06.pattern.windows=cmd.exe /C @echo ide.libraries={runtime.ide.path}\libraries>> "{runtime.platform.path}\{rumpsduino.compile.param}"
recipe.hooks.sketch.prebuild.07.pattern.windows=cmd.exe /C @echo sketchbook.libraries.path={runtime.hardware.path}\..\..\libraries>> "{runtime.platform.path}\{rumpsduino.compile.param}"
recipe.hooks.sketch.prebuild.08.pattern.windows=cmd.exe /C @echo build.fqbn={build.fqbn}>> "{runtime.platform.path}\{rumpsduino.compile.param}"
recipe.hooks.sketch.prebuild.09.pattern.windows=cmd.exe /C @echo ide.version={ide_version}>> "{runtime.platform.path}\{rumpsduino.compile.param}"
recipe.hooks.sketch.prebuild.10.pattern.windows=cmd.exe /C @echo ide.build.path={build.path}>> "{runtime.platform.path}\{rumpsduino.compile.param}"
recipe.hooks.sketch.prebuild.11.pattern.windows=cmd.exe /C @echo build.warn_data_percentage={build.warn_data_percentage}>> "{runtime.platform.path}\{rumpsduino.compile.param}"
recipe.hooks.sketch.prebuild.12.pattern.windows=cmd.exe /C @echo source.path={build.source.path}>> "{runtime.platform.path}\{rumpsduino.compile.param}"
recipe.hooks.sketch.prebuild.13.pattern.windows=cmd.exe /C @echo source.name={build.project_name}>> "{runtime.platform.path}\{rumpsduino.compile.param}"
recipe.hooks.sketch.prebuild.14.pattern.windows=cmd.exe /C @echo arduino.builder.path={runtime.ide.path}>> "{runtime.platform.path}\{rumpsduino.compile.param}"


#recipe.hooks.sketch.prebuild.01.pattern.windows=cmd.exe /C @echo ide.hardware.path=%cd%\hardware> "{runtime.platform.path}\{rumpsduino.compile.param}"
#recipe.hooks.sketch.prebuild.02.pattern.windows=cmd /C @echo ide.tools.builder=%cd%\tools-builder>> "{runtime.platform.path}\{rumpsduino.compile.param}"
#recipe.hooks.sketch.prebuild.03.pattern.windows=cmd /C @echo ide.tools.avr={tools.avrdude.path}>> "{runtime.platform.path}\{rumpsduino.compile.param}"
#recipe.hooks.sketch.prebuild.04.pattern.windows=cmd /C @echo ide.libraries=%cd%\libraries>> "{runtime.platform.path}\{rumpsduino.compile.param}"
#recipe.hooks.sketch.prebuild.05.pattern.windows=cmd /C @echo ide.build.path={build.path}>> "{runtime.platform.path}\{rumpsduino.compile.param}"
#recipe.hooks.sketch.prebuild.06.pattern.windows=cmd /C @echo rumpsduino1_0.hardware.path={runtime.hardware.path}\..>> "{runtime.platform.path}\{rumpsduino.compile.param}"
#recipe.hooks.sketch.prebuild.07.pattern.windows=cmd /C @echo sketchbook.libraries.path={runtime.hardware.path}\..\..\libraries>> "{runtime.platform.path}\{rumpsduino.compile.param}"
#recipe.hooks.sketch.prebuild.08.pattern.windows=cmd /C @echo source.path={build.source.path}>> "{runtime.platform.path}\{rumpsduino.compile.param}"
#recipe.hooks.sketch.prebuild.09.pattern.windows=cmd /C @echo source.name={build.project_name}>> "{runtime.platform.path}\{rumpsduino.compile.param}"
#recipe.hooks.sketch.prebuild.10.pattern.windows=cmd /C @echo build.fqbn={build.fqbn}>> "{runtime.platform.path}\{rumpsduino.compile.param}"
#recipe.hooks.sketch.prebuild.11.pattern.windows=cmd /C @echo ide.version={ide_version}>> "{runtime.platform.path}\{rumpsduino.compile.param}"
#recipe.hooks.sketch.prebuild.12.pattern.windows=cmd /C @echo build.warn_data_percentage={build.warn_data_percentage}>> "{runtime.platform.path}\{rumpsduino.compile.param}"

# pre sketch script - prepare main.c from main#.c
recipe.hooks.sketch.prebuild.16.pattern.windows="{runtime.platform.path}/precompile_script.bat"


# post objcopy - save binary file, control for next core's iteration
recipe.hooks.objcopy.postobjcopy.02.pattern.windows="{runtime.platform.path}/postcompile_script.bat"
#recipe.hooks.objcopy.postobjcopy.10.pattern.windows=this



#recipe.hooks.sketch.prebuild.NUMBER.pattern (called before sketch compilation)
#recipe.hooks.sketch.postbuild.NUMBER.pattern (called after sketch compilation)
#recipe.hooks.libraries.prebuild.NUMBER.pattern (called before libraries compilation)
#recipe.hooks.libraries.postbuild.NUMBER.pattern (called after libraries compilation)
#recipe.hooks.core.prebuild.NUMBER.pattern (called before core compilation)
#recipe.hooks.core.postbuild.NUMBER.pattern (called after core compilation)
#recipe.hooks.linking.prelink.NUMBER.pattern (called before linking)
#recipe.hooks.linking.postlink.NUMBER.pattern (called after linking)
#recipe.hooks.objcopy.preobjcopy.NUMBER.pattern (called before objcopy recipes execution)
#recipe.hooks.objcopy.postobjcopy.NUMBER.pattern (called after objcopy recipes execution)
#recipe.hooks.savehex.presavehex.NUMBER.pattern (called before savehex recipe execution)
#recipe.hooks.savehex.postsavehex.NUMBER.pattern (called after savehex recipe execution)