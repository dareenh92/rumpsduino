//------------------------------------------------------------------------------
//
#include "main.h"

#include "type.h"
#include "glcd.h"

//---------------------------------------------
/* 
LCD Data =  GPIO0_1 - GPIO0_16

LCD_RS     = GPIO0_20
LCD_WR     = GPIO0_21
LCD_RD     = GPIO0_22
LCD_CS     = GPIO0_23
LCD_REST   = GPIO0_24
*/


//-------------------------------------------------------------------------
u8 hanzi[256]={
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0xFE,0xFF,0x01,
  0x00,0xFE,0xFF,0x01,0x00,0x06,0xC0,0x00,0x00,0x06,0xC0,0x00,0x00,0x06,0xC0,0x00,
  0x00,0xFE,0xFF,0x00,0x00,0x06,0xC0,0x00,0x00,0x06,0xC0,0x00,0x00,0x06,0xC0,0x00,
  0x00,0xFE,0xFF,0x00,0x00,0x06,0xC0,0x00,0x00,0x06,0xC0,0x00,0x00,0x02,0x00,0x00,
  0x30,0x30,0x0C,0x1C,0xF0,0x7F,0xFC,0x3F,0x30,0x30,0x0C,0x1C,0x30,0x30,0x0C,0x1C,
  0x30,0x30,0x0C,0x1C,0x30,0x30,0x0C,0x1C,0xF0,0x3F,0xFC,0x1F,0x30,0x30,0x0C,0x1C,
  0x30,0x30,0x0C,0x1C,0x30,0x30,0x0C,0x1C,0x30,0x30,0x0C,0x1C,0xF0,0x3F,0xFC,0x1F,
  0xF0,0x3F,0xFC,0x1F,0x30,0x30,0x0C,0x1C,0x30,0x10,0x04,0x0C,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x08,0x08,0xC0,0xF1,0xFF,0x1F,
  0xC0,0xF0,0xFF,0x1F,0xC0,0x48,0x4C,0x1C,0xC4,0xDC,0xCC,0x1D,0xCC,0xDC,0x8D,0x1D,
  0xDC,0x8E,0x8D,0x1D,0xD8,0x06,0x0E,0x1F,0xF8,0xC3,0xEF,0x1D,0xF8,0xF1,0xEC,0x1C,
  0xD0,0x60,0x1D,0x1C,0xC0,0x1C,0x77,0x0C,0xFE,0x9F,0xE7,0x00,0x34,0x83,0xE3,0x0C,
  0x30,0xC3,0xFF,0x1F,0x30,0xC3,0x61,0x00,0x30,0xE3,0x61,0x00,0x30,0xE3,0x61,0x06,
  0x30,0xF3,0xFF,0x0F,0x30,0xDB,0x61,0x00,0x30,0xFB,0x61,0x04,0x38,0xDB,0x61,0x0E,
  0x18,0xCF,0xFF,0x0F,0x18,0xC7,0x61,0x00,0x98,0xC7,0x61,0x00,0x0C,0xC3,0x61,0x38,
  0x04,0xC2,0xFF,0x3F,0x06,0xC0,0x01,0x00,0x02,0xC0,0x01,0x00,0x00,0x00,0x00,0x00,
};
u8 asc2_1608[1520]={
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x00,0x00,0x18,0x18,0x00,0x00,
  0x00,0x48,0x6C,0x24,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x24,0x24,0x24,0x7F,0x12,0x12,0x12,0x7F,0x12,0x12,0x12,0x00,0x00,
  0x00,0x00,0x08,0x1C,0x2A,0x2A,0x0A,0x0C,0x18,0x28,0x28,0x2A,0x2A,0x1C,0x08,0x08,
  0x00,0x00,0x00,0x22,0x25,0x15,0x15,0x15,0x2A,0x58,0x54,0x54,0x54,0x22,0x00,0x00,
  0x00,0x00,0x00,0x0C,0x12,0x12,0x12,0x0A,0x76,0x25,0x29,0x11,0x91,0x6E,0x00,0x00,
  0x00,0x06,0x06,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x40,0x20,0x10,0x10,0x08,0x08,0x08,0x08,0x08,0x08,0x10,0x10,0x20,0x40,0x00,
  0x00,0x02,0x04,0x08,0x08,0x10,0x10,0x10,0x10,0x10,0x10,0x08,0x08,0x04,0x02,0x00,
  0x00,0x00,0x00,0x00,0x08,0x08,0x6B,0x1C,0x1C,0x6B,0x08,0x08,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x08,0x08,0x08,0x08,0x7F,0x08,0x08,0x08,0x08,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x06,0x04,0x03,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x06,0x00,0x00,
  0x00,0x00,0x80,0x40,0x40,0x20,0x20,0x10,0x10,0x08,0x08,0x04,0x04,0x02,0x02,0x00,
  0x00,0x00,0x00,0x18,0x24,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x24,0x18,0x00,0x00,
  0x00,0x00,0x00,0x08,0x0E,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00,
  0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x20,0x20,0x10,0x08,0x04,0x42,0x7E,0x00,0x00,
  0x00,0x00,0x00,0x3C,0x42,0x42,0x20,0x18,0x20,0x40,0x40,0x42,0x22,0x1C,0x00,0x00,
  0x00,0x00,0x00,0x20,0x30,0x28,0x24,0x24,0x22,0x22,0x7E,0x20,0x20,0x78,0x00,0x00,
  0x00,0x00,0x00,0x7E,0x02,0x02,0x02,0x1A,0x26,0x40,0x40,0x42,0x22,0x1C,0x00,0x00,
  0x00,0x00,0x00,0x38,0x24,0x02,0x02,0x1A,0x26,0x42,0x42,0x42,0x24,0x18,0x00,0x00,
  0x00,0x00,0x00,0x7E,0x22,0x22,0x10,0x10,0x08,0x08,0x08,0x08,0x08,0x08,0x00,0x00,
  0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x24,0x18,0x24,0x42,0x42,0x42,0x3C,0x00,0x00,
  0x00,0x00,0x00,0x18,0x24,0x42,0x42,0x42,0x64,0x58,0x40,0x40,0x24,0x1C,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x04,
  0x00,0x00,0x00,0x40,0x20,0x10,0x08,0x04,0x02,0x04,0x08,0x10,0x20,0x40,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x00,0x00,0x00,0x7F,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x02,0x04,0x08,0x10,0x20,0x40,0x20,0x10,0x08,0x04,0x02,0x00,0x00,
  0x00,0x00,0x00,0x3C,0x42,0x42,0x46,0x40,0x20,0x10,0x10,0x00,0x18,0x18,0x00,0x00,
  0x00,0x00,0x00,0x1C,0x22,0x5A,0x55,0x55,0x55,0x55,0x2D,0x42,0x22,0x1C,0x00,0x00,
  0x00,0x00,0x00,0x08,0x08,0x18,0x14,0x14,0x24,0x3C,0x22,0x42,0x42,0xE7,0x00,0x00,
  0x00,0x00,0x00,0x1F,0x22,0x22,0x22,0x1E,0x22,0x42,0x42,0x42,0x22,0x1F,0x00,0x00,
  0x00,0x00,0x00,0x7C,0x42,0x42,0x01,0x01,0x01,0x01,0x01,0x42,0x22,0x1C,0x00,0x00,
  0x00,0x00,0x00,0x1F,0x22,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x22,0x1F,0x00,0x00,
  0x00,0x00,0x00,0x3F,0x42,0x12,0x12,0x1E,0x12,0x12,0x02,0x42,0x42,0x3F,0x00,0x00,
  0x00,0x00,0x00,0x3F,0x42,0x12,0x12,0x1E,0x12,0x12,0x02,0x02,0x02,0x07,0x00,0x00,
  0x00,0x00,0x00,0x3C,0x22,0x22,0x01,0x01,0x01,0x71,0x21,0x22,0x22,0x1C,0x00,0x00,
  0x00,0x00,0x00,0xE7,0x42,0x42,0x42,0x42,0x7E,0x42,0x42,0x42,0x42,0xE7,0x00,0x00,
  0x00,0x00,0x00,0x3E,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00,
  0x00,0x00,0x00,0x7C,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x11,0x0F,
  0x00,0x00,0x00,0x77,0x22,0x12,0x0A,0x0E,0x0A,0x12,0x12,0x22,0x22,0x77,0x00,0x00,
  0x00,0x00,0x00,0x07,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x42,0x7F,0x00,0x00,
  0x00,0x00,0x00,0x77,0x36,0x36,0x36,0x36,0x2A,0x2A,0x2A,0x2A,0x2A,0x6B,0x00,0x00,
  0x00,0x00,0x00,0xE3,0x46,0x46,0x4A,0x4A,0x52,0x52,0x52,0x62,0x62,0x47,0x00,0x00,
  0x00,0x00,0x00,0x1C,0x22,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x22,0x1C,0x00,0x00,
  0x00,0x00,0x00,0x3F,0x42,0x42,0x42,0x42,0x3E,0x02,0x02,0x02,0x02,0x07,0x00,0x00,
  0x00,0x00,0x00,0x1C,0x22,0x41,0x41,0x41,0x41,0x41,0x4D,0x53,0x32,0x1C,0x60,0x00,
  0x00,0x00,0x00,0x3F,0x42,0x42,0x42,0x3E,0x12,0x12,0x22,0x22,0x42,0xC7,0x00,0x00,
  0x00,0x00,0x00,0x7C,0x42,0x42,0x02,0x04,0x18,0x20,0x40,0x42,0x42,0x3E,0x00,0x00,
  0x00,0x00,0x00,0x7F,0x49,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x1C,0x00,0x00,
  0x00,0x00,0x00,0xE7,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00,
  0x00,0x00,0x00,0xE7,0x42,0x42,0x22,0x24,0x24,0x14,0x14,0x18,0x08,0x08,0x00,0x00,
  0x00,0x00,0x00,0x6B,0x49,0x49,0x49,0x49,0x55,0x55,0x36,0x22,0x22,0x22,0x00,0x00,
  0x00,0x00,0x00,0xE7,0x42,0x24,0x24,0x18,0x18,0x18,0x24,0x24,0x42,0xE7,0x00,0x00,
  0x00,0x00,0x00,0x77,0x22,0x22,0x14,0x14,0x08,0x08,0x08,0x08,0x08,0x1C,0x00,0x00,
  0x00,0x00,0x00,0x7E,0x21,0x20,0x10,0x10,0x08,0x04,0x04,0x42,0x42,0x3F,0x00,0x00,
  0x00,0x78,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x78,0x00,
  0x00,0x00,0x02,0x02,0x04,0x04,0x08,0x08,0x08,0x10,0x10,0x20,0x20,0x20,0x40,0x40,
  0x00,0x1E,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x1E,0x00,
  0x00,0x38,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,
  0x00,0x06,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x42,0x78,0x44,0x42,0x42,0xFC,0x00,0x00,
  0x00,0x00,0x00,0x03,0x02,0x02,0x02,0x1A,0x26,0x42,0x42,0x42,0x26,0x1A,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x44,0x02,0x02,0x02,0x44,0x38,0x00,0x00,
  0x00,0x00,0x00,0x60,0x40,0x40,0x40,0x78,0x44,0x42,0x42,0x42,0x64,0xD8,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x42,0x7E,0x02,0x02,0x42,0x3C,0x00,0x00,
  0x00,0x00,0x00,0xF0,0x88,0x08,0x08,0x7E,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x22,0x22,0x1C,0x02,0x3C,0x42,0x42,0x3C,
  0x00,0x00,0x00,0x03,0x02,0x02,0x02,0x3A,0x46,0x42,0x42,0x42,0x42,0xE7,0x00,0x00,
  0x00,0x00,0x00,0x0C,0x0C,0x00,0x00,0x0E,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00,
  0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x38,0x20,0x20,0x20,0x20,0x20,0x20,0x22,0x1E,
  0x00,0x00,0x00,0x03,0x02,0x02,0x02,0x72,0x12,0x0A,0x16,0x12,0x22,0x77,0x00,0x00,
  0x00,0x00,0x00,0x0E,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x92,0x92,0x92,0x92,0x92,0xB7,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3B,0x46,0x42,0x42,0x42,0x42,0xE7,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1B,0x26,0x42,0x42,0x42,0x22,0x1E,0x02,0x07,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x44,0x42,0x42,0x42,0x44,0x78,0x40,0xE0,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x77,0x4C,0x04,0x04,0x04,0x04,0x1F,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x42,0x02,0x3C,0x40,0x42,0x3E,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x3E,0x08,0x08,0x08,0x08,0x08,0x30,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x63,0x42,0x42,0x42,0x42,0x62,0xDC,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE7,0x42,0x24,0x24,0x14,0x08,0x08,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xEB,0x49,0x49,0x55,0x55,0x22,0x22,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x76,0x24,0x18,0x18,0x18,0x24,0x6E,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE7,0x42,0x24,0x24,0x14,0x18,0x08,0x08,0x07,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x22,0x10,0x08,0x08,0x44,0x7E,0x00,0x00,
  0x00,0xC0,0x20,0x20,0x20,0x20,0x20,0x10,0x20,0x20,0x20,0x20,0x20,0x20,0xC0,0x00,
  0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,
  0x00,0x06,0x08,0x08,0x08,0x08,0x08,0x10,0x08,0x08,0x08,0x08,0x08,0x08,0x06,0x00,
  0x0C,0x32,0xC2,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
}; 

/*u8 star_code[128]= {
  0x00, 0x01, 0x80, 0x00,
  0x00, 0x03, 0xc0, 0x00,
  0x00, 0x07, 0xe0, 0x00,
  0x00, 0x07, 0xe0, 0x00,

  0x00, 0x07, 0xe0, 0x00,
  0x00, 0x0f, 0xf0, 0x00,
  0x00, 0x0f, 0xf0, 0x00,
  0x00, 0x0f, 0xf0, 0x00,

  0x00, 0x1f, 0xf8, 0x00,
  0x00, 0x1f, 0xf8, 0x00,
  0x07, 0xff, 0xff, 0xe0,
  0xff, 0xff, 0xff, 0xff,

  0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff,
  0x7f, 0xff, 0xff, 0xfe,
  0x3f, 0xff, 0xff, 0xfc,

  0x1f, 0xff, 0xff, 0xf8,
  0x0f, 0xff, 0xff, 0xf0,
  0x03, 0xff, 0xff, 0xc0,
  0x01, 0xff, 0xff, 0x80,

  0x00, 0xff, 0xff, 0x00,
  0x01, 0xff, 0xff, 0x80,
  0x01, 0xff, 0xff, 0x80,
  0x01, 0xff, 0xff, 0x80,

  0x01, 0xff, 0xff, 0x80,
  0x03, 0xff, 0xff, 0xc0,
  0x03, 0xff, 0xff, 0xc0,
  0x03, 0xfe, 0x8f, 0xc0,

  0x07, 0xf8, 0x1f, 0xe0,
  0x07, 0xf0, 0x0f, 0xe0,
  0x07, 0xe0, 0x07, 0xe0,
  0x03, 0xc0, 0x03, 0xc0
};*/

u8 star_code[128]= {
  0x00, 0x80, 0x01, 0x00,
  0x00, 0xc0, 0x03, 0x00,
  0x00, 0xe0, 0x07, 0x00,
  0x00, 0xe0, 0x07, 0x00,

  0x00, 0xe0, 0x07, 0x00,
  0x00, 0xf0, 0x0f, 0x00,
  0x00, 0xf0, 0x0f, 0x00,
  0x00, 0xf0, 0x0f, 0x00,

  0x00, 0xf8, 0x1f, 0x00,
  0x00, 0xf8, 0x1f, 0x00,
  0xe0, 0xff, 0xff, 0x07,
  0xff, 0xff, 0xff, 0xff,

  0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff,
  0xfe, 0xff, 0xff, 0x7f,
  0xfc, 0xff, 0xff, 0x3f,

  0xf8, 0xff, 0xff, 0x1f,
  0xf0, 0xff, 0xff, 0x0f,
  0xc0, 0xff, 0xff, 0x03,
  0x80, 0xff, 0xff, 0x01,

  0x00, 0xff, 0xff, 0x00,
  0x80, 0xff, 0xff, 0x01,
  0x80, 0xff, 0xff, 0x01,
  0x80, 0xff, 0xff, 0x01,

  0x80, 0xff, 0xff, 0x01,
  0xc0, 0xff, 0xff, 0x03,
  0xc0, 0xff, 0xff, 0x03,
  0xc0, 0x7f, 0xfe, 0x03,

  0xe0, 0x1f, 0xf8, 0x07,
  0xe0, 0x0f, 0xf0, 0x07,
  0xe0, 0x07, 0xe0, 0x07,
  0xc0, 0x03, 0xc0, 0x03
};

u8 star_code24[72] = {
  0x00, 0x00, 0x00,
  0x00, 0x18, 0x00,
  0x00, 0x18, 0x00,
  0x00, 0x18, 0x00,

  0x00, 0x3c, 0x00,
  0x00, 0x3c, 0x00,
  0x00, 0x3c, 0x00,
  0x00, 0x7e, 0x00,

  0x00, 0x7e, 0x00,
  0xff, 0xff, 0xff,
  0xfe, 0xff, 0x7f,
  0xfc, 0xff, 0x3f,

  0xf0, 0xff, 0x0f,
  0xe0, 0xff, 0x07,
  0xc0, 0xff, 0x03,
  0x80, 0xff, 0x01,

  0xc0, 0xff, 0x03,
  0xc0, 0xff, 0x03,
  0xc0, 0xff, 0x03,
  0xc0, 0xe7, 0x03,

  0xe0, 0xc3, 0x07,
  0xe0, 0x00, 0x07,
  0x60, 0x00, 0x06,
  0x20, 0x00, 0x04
};


u8 thunder_code[96] = {
  0x00, 0x02, 0x00,
  0x80, 0x07, 0x00,
  0xc0, 0x07, 0x00,
  0xf0, 0x0f, 0x00,

  0xf8, 0x0f, 0x00,
  0xff, 0x1f, 0x00,
  0xff, 0x1f, 0x00,
  0xfe, 0x3f, 0x00,

  0xf8, 0x3f, 0x00,
  0xf0, 0x3f, 0x00,
  0xe0, 0x1f, 0x00,
  0xc0, 0x3f, 0x00,

  0x00, 0x7f, 0x00,
  0x80, 0x7f, 0x00,
  0xc0, 0xff, 0x00,
  0x80, 0xff, 0x01,

  0x00, 0xff, 0x03,
  0x00, 0xfe, 0x03,
  0x00, 0xf8, 0x01,
  0x00, 0xf0, 0x01,

  0x00, 0xe0, 0x03,
  0x00, 0xf8, 0x03,
  0x00, 0xf8, 0x07,
  0x00, 0xe0, 0x07,

  0x00, 0xc0, 0x0f,
  0x00, 0x80, 0x1f,
  0x00, 0x00, 0x1e,
  0x00, 0x00, 0x3c,

  0x00, 0x00, 0x38,
  0x00, 0x00, 0x70,
  0x00, 0x00, 0x40,
  0x00, 0x00, 0x80
};


//---------------------------------------------
u16 BACK_COLOR, POINT_COLOR;   //???,???

 

//---------------------------------------------
void LCD_WR_REG_DATA(u16 reg, u16 da)
{
  LCD_WR_REG(reg);
  LCD_WR_DATA(da);
}


//---------------------------------------------
void Address_set(u16 x1, u16 y1, u16 x2, u16 y2)
{ 
  LCD_WR_REG(0x0020); LCD_WR_DATA(x1);   // X coordinate
  LCD_WR_REG(0x0021); LCD_WR_DATA(y1);   // Y coordinate
  LCD_WR_REG(0x0050); LCD_WR_DATA(x1);   // X start
  LCD_WR_REG(0x0052); LCD_WR_DATA(y1);   // Y start
  LCD_WR_REG(0x0051); LCD_WR_DATA(x2);   // X end
  LCD_WR_REG(0x0053); LCD_WR_DATA(y2);   // Y end
  LCD_WR_REG(0x0022);
}


//---------------------------------------------
void Lcd_Init(void)
{
  int i;

  //GPIO_OEN_SET = 0x01f1fffe;  // set LCD output
  GPIO_OEN_SET = LCD_RS | LCD_WR | LCD_RD | LCD_CS | LCD_REST | LCD_DATA; 	// set LCD output

  //MUXC_PU &= 0xfe0e0001;  // turn off PU for LCD output
  MUXC_PU &= ~(LCD_RS | LCD_WR | LCD_RD | LCD_CS | LCD_REST | LCD_DATA);  // turn off PU for LCD output
  
  GPIO_BSET = LCD_REST;

  GPIO_BCLR = LCD_RS;
  GPIO_BCLR = LCD_CS;
  GPIO_BCLR = LCD_RD;
  GPIO_BCLR = LCD_WR;

  //---------------------------------------------
  GPIO_BSET = LCD_CS;

  if ((GPIO_DATAIN & LCD_CS) == 0)
  {
     LCD_WR_REG_DATA(0,0);
     //LCD_ShowString(0,0," ");
     //LCD_ShowNum(0,0,0,0);
     //LCD_Show2Num(0,0,0,0);
     //LCD_DrawPoint_big(0,0);
     //LCD_DrawRectangle(0,0,0,0);
     //Draw_Circle(0,0,0);
   }

  GPIO_BSET = LCD_RD;
  GPIO_BSET = LCD_WR;
  GPIO_BCLR = LCD_REST;

  // aprox 20ms delay
  for (i = 0; i < 20000; i++)
    __NOP();

  GPIO_BSET = LCD_REST;

  // aprox 20ms delay
  for (i = 0; i < 20000; i++)
    __NOP();

  GPIO_BSET = LCD_CS;

  LCD_WR_REG_DATA(0x0001, 0x0100);
  LCD_WR_REG_DATA(0x0002, 0x0700);
  LCD_WR_REG_DATA(0x0003, 0x1030);
  LCD_WR_REG_DATA(0x0004, 0x0000);
  LCD_WR_REG_DATA(0x0008, 0x0207);
  LCD_WR_REG_DATA(0x0009, 0x0000);
  LCD_WR_REG_DATA(0x000A, 0x0000);
  LCD_WR_REG_DATA(0x000C, 0x0000);
  LCD_WR_REG_DATA(0x000D, 0x0000);
  LCD_WR_REG_DATA(0x000F, 0x0000);

  //power on sequence VGHVGL
  LCD_WR_REG_DATA(0x0010, 0x0000);
  LCD_WR_REG_DATA(0x0011, 0x0007);
  LCD_WR_REG_DATA(0x0012, 0x0000);
  LCD_WR_REG_DATA(0x0013, 0x0000);

  //vgh
  LCD_WR_REG_DATA(0x0010, 0x1290);
  LCD_WR_REG_DATA(0x0011, 0x0227);

  //vregiout
  LCD_WR_REG_DATA(0x0012, 0x001d); // 0x001b
 
  //vom amplitude
  LCD_WR_REG_DATA(0x0013, 0x1500);

  //vom H
  LCD_WR_REG_DATA(0x0029, 0x0018);
  LCD_WR_REG_DATA(0x002B, 0x000D);

  //gamma
  LCD_WR_REG_DATA(0x0030, 0x0004);
  LCD_WR_REG_DATA(0x0031, 0x0307);
  LCD_WR_REG_DATA(0x0032, 0x0002); // 0006
  LCD_WR_REG_DATA(0x0035, 0x0206);
  LCD_WR_REG_DATA(0x0036, 0x0408);
  LCD_WR_REG_DATA(0x0037, 0x0507);
  LCD_WR_REG_DATA(0x0038, 0x0204); // 0200
  LCD_WR_REG_DATA(0x0039, 0x0707);
  LCD_WR_REG_DATA(0x003C, 0x0405); // 0504
  LCD_WR_REG_DATA(0x003D, 0x0F02);
 
  //ram
  LCD_WR_REG_DATA(0x0050, 0x0000);
  LCD_WR_REG_DATA(0x0051, 0x00EF);
  LCD_WR_REG_DATA(0x0052, 0x0000);
  LCD_WR_REG_DATA(0x0053, 0x013F);
  LCD_WR_REG_DATA(0x0060, 0xA700);
  LCD_WR_REG_DATA(0x0061, 0x0001);
  LCD_WR_REG_DATA(0x006A, 0x0000);
  //
  LCD_WR_REG_DATA(0x0080, 0x0000);
  LCD_WR_REG_DATA(0x0081, 0x0000);
  LCD_WR_REG_DATA(0x0082, 0x0000);
  LCD_WR_REG_DATA(0x0083, 0x0000);
  LCD_WR_REG_DATA(0x0084, 0x0000);
  LCD_WR_REG_DATA(0x0085, 0x0000);
  //
  LCD_WR_REG_DATA(0x0090, 0x0010);
  LCD_WR_REG_DATA(0x0092, 0x0600);
  LCD_WR_REG_DATA(0x0093, 0x0003);
  LCD_WR_REG_DATA(0x0095, 0x0110);
  LCD_WR_REG_DATA(0x0097, 0x0000);
  LCD_WR_REG_DATA(0x0098, 0x0000);
  LCD_WR_REG_DATA(0x0007, 0x0133);

}


//---------------------------------------------
// clear LCD
//Color: the color filler
void LCD_Clear(u16 Color)
{
  u16 i,j;

  Address_set(0, 0, LCD_W-1, LCD_H-1);

  for(i=0;i<LCD_W;i++)
  {
    for (j=0;j<LCD_H;j++)
     {
        LCD_WR_DATA(Color);
    }
  }
}


//---------------------------------------------
// 
void LCD_DrawPoint(u16 x,u16 y, u16 color)
{
  Address_set(x, y, x, y);  // coordinate
  LCD_WR_DATA(color);
}


//---------------------------------------------
//
void LCD_DrawPoint_big(u16 x,u16 y, u16 color)
{
  LCD_Fill(x-1, y-1, x+1, y+1, color);
} 


//---------------------------------------------
//
//  size: (xend-xsta) * (yend-ysta)
void LCD_Fill(u16 xsta, u16 ysta, u16 xend, u16 yend, u16 color)
{          
  u16 i,j;

  Address_set(xsta,ysta,xend,yend);      // area

  for(i=ysta; i<=yend; i++)
  {
    for(j=xsta; j<=xend; j++)
      LCD_WR_DATA(color); // fill
  }
}  


//---------------------------------------------
//
//x1, y1: start
//x2, y2: end  
void LCD_DrawLine(u16 x1, u16 y1, u16 x2, u16 y2, u16 color)
{
  u16 t;
  int xerr=0, yerr=0, delta_x, delta_y, distance;
  int incx, incy, uRow, uCol;

  delta_x=x2-x1; //??????
  delta_y=y2-y1;
 
  uRow=x1;
  uCol=y1;

  if(delta_x>0)
    incx=1; //??????
  else if(delta_x==0)
    incx=0;//???
  else {
    incx=-1;
    delta_x=-delta_x;
  }
 
  if(delta_y>0)
    incy=1;
  else if(delta_y==0)
    incy=0;//???
  else{
    incy=-1;
    delta_y=-delta_y;
  }

  if( delta_x>delta_y)
    distance=delta_x; //?????????
  else
    distance=delta_y;

  for(t=0; t<=distance+1; t++ )//????
  {
    LCD_DrawPoint(uRow,uCol, color);//??
    xerr+=delta_x ;
    yerr+=delta_y ;

    if(xerr>distance)
    {
      xerr-=distance;
      uRow+=incx;
    }
    if(yerr>distance)
    {
      yerr-=distance;
      uCol+=incy;
    }
  }
}    


//---------------------------------------------
//
void LCD_DrawRectangle(u16 x1, u16 y1, u16 x2, u16 y2, u16 color)
{
  LCD_DrawLine(x1,y1,x2,y1, color);
  LCD_DrawLine(x1,y1,x1,y2, color);
  LCD_DrawLine(x1,y2,x2,y2, color);
  LCD_DrawLine(x2,y1,x2,y2, color);
}


//---------------------------------------------
//
//(x,y): center
//r    : radius
void LCD_DrawCircle(u16 x0, u16 y0, u16 r, u16 color)
{
  int a,b;
  int di;

  a=0;
  b=r;

  di=3-(r<<1);             //

  while(a<=b)
  {
    LCD_DrawPoint(x0-b,   y0-a,  color);         //3
    LCD_DrawPoint(x0+b,   y0-a,  color);         //0
    LCD_DrawPoint(x0-a,   y0+b,  color);         //1
    LCD_DrawPoint(x0-b,   y0-a,  color);         //7
    LCD_DrawPoint(x0-a,   y0-b,  color);         //2
    LCD_DrawPoint(x0+b,   y0+a,  color);         //4
    LCD_DrawPoint(x0+a,  y0-b,  color);         //5
    LCD_DrawPoint(x0+a,  y0+b,  color);         //6
    LCD_DrawPoint(x0-b,    y0+a,  color);

    a++;
    //
    if(di<0)
      di +=4*a+6;
    else
    {
      di+=10+4*(a-b);
      b--;
    }
    LCD_DrawPoint(x0+a, y0+b, color);
  }
} 

//---------------------------------------------
//x,y  :start coordinate
//num  : ASCII code
//mode : 0 => draw background, 1 => no draw background
void LCD_ShowChar(u16 x, u16 y, u8 num, u8 mode, u16 color, u16 b_color)
{
  u8 temp;
  u8 pos,t;
  u16 x0=x;
  u16 colortemp=color;
   
  if(x>LCD_W-16 || y>LCD_H-16)
    return;
  //
  num = num - ' '; //
  Address_set(x, y, x+8-1, y+16-1);      //

  if(!mode) //
  {
    for(pos=0;pos<16;pos++)
    {
      temp=asc2_1608[(u16)num*16+pos];     //??1608??

      for(t=0;t<8;t++)
      {
        if(temp&0x01)
          colortemp = color;
        else
          colortemp = b_color;

        LCD_WR_DATA(colortemp);
        temp>>=1;
        x++;
      }

      x=x0;
      y++;
    }
  }
  else//????
  {
    for(pos=0;pos<16;pos++)
    {
      temp=asc2_1608[(u16)num*16+pos];     //??1608??

      for(t=0;t<8;t++)
      {
        if(temp&0x01)
          LCD_DrawPoint(x+t,y+pos, color); //????
          temp>>=1;
      }
    }
  }
}   


//----------------------------------------------
//m^n
u32 mypow(u8 m,u8 n)
{
  u32 result=1;

  while(n--)
    result*=m;

  return result;
}


//---------------------------------------------
//x,y :start coordinate
//len :showed number
//num :32bit (0~4294967295)
void LCD_ShowNum(u16 x, u16 y, u32 num, u8 len, u16 color, u16 b_color)
{
  u8 t,temp;
  u8 enshow=0;
  num=(u16)num;

  for(t=0; t<len; t++)
  {
    temp=(num/mypow(10,len-t-1))%10;

    if(enshow==0 && t<(len-1))
    {
      if(temp==0)
      {
        LCD_ShowChar(x+8*t, y, ' ', 0, color, b_color);
        continue;
      }
      else
        enshow=1;
    }

    LCD_ShowChar(x+8*t, y, temp+48, 0, color, b_color);
  }
} 


//---------------------------------------------
//x,y: start coordinate
//num:2 digit (0~99);
void LCD_Show2Num(u16 x, u16 y, u16 num, u8 len, u16 color, u16 b_color)
{
  u8 t,temp;
  for(t=0;t<len;t++)
  {
    temp=(num/mypow(10,len-t-1))%10;

     LCD_ShowChar(x+8*t, y, temp+'0', 0, color, b_color);
  }
} 


//---------------------------------------------
//x,y : start coordinate
//*p  : char buffer, end with '\0'
void LCD_ShowString(u16 x,u16 y,const u8 *p, u16 color, u16 b_color)
{         
    while(*p!='\0')
    {       
        if(x>LCD_W-16)
    {
      x=0;
      y+=16;
    }

        if(y>LCD_H-16)
    {
      y=x=0;
      LCD_Clear(b_color);
    }

        LCD_ShowChar(x, y, *p, 0, color, b_color);

        x+=8;

        p++;
    }  
}


//---------------------------------------------
// 32 * 32
//x,y : start coordinate
void LCD_DrawStar(u16 x, u16 y, u16 color, u16 b_color)
{
    u8 temp;
    u8 pos,t;
  u16 x0=x;
  u16 colortemp=color;
   
    if(x>LCD_W-32 || y>LCD_H-32)
    return;
  //
  Address_set(x, y, x+32-1, y+32-1);      //

  for(pos=0; pos<128; pos++)
  {
    temp=star_code[pos];     // lookup

    for(t=0;t<8;t++)
    {
        if(temp&0x01)
        colortemp = color;
      else
        colortemp = b_color;

      LCD_WR_DATA(colortemp);
      temp>>=1;
      x++;
    }

    x=x0;
    y++;
  }
}  


//---------------------------------------------
// 24 * 24
//x,y : start coordinate
void LCD_DrawStar24(u16 x, u16 y, u16 color, u16 b_color)
{
    u8 temp;
    u8 pos,t;
  u16 x0=x;
  u16 colortemp=color;
   
    if(x>LCD_W-24 || y>LCD_H-24)
    return;
  //
  Address_set(x, y, x+24-1, y+24-1);      //

  for(pos=0; pos<72; pos++)
  {
    temp=star_code24[pos];     // lookup

    for(t=0;t<8;t++)
    {
        if(temp&0x01)
        colortemp = color;
      else
        colortemp = b_color;

      LCD_WR_DATA(colortemp);
      temp>>=1;
      x++;
    }

    x=x0;
    y++;
  }
}   


//---------------------------------------------
// 24 * 32
//x,y : start coordinate
void LCD_DrawThunder(u16 x, u16 y, u16 color, u16 b_color)
{
  u8 temp;
  u8 pos,t;
  u16 x0=x;
  u16 colortemp=color;

    if(x>LCD_W-24 || y>LCD_H-32)
    return;
  //
  Address_set(x, y, x+24-1, y+32-1);      //

  for(pos=0; pos<96; pos++)
  {
    temp=thunder_code[pos];     // lookup

    for(t=0;t<8;t++)
    {
        if(temp&0x01)
        colortemp = color;
      else
        colortemp = b_color;

      LCD_WR_DATA(colortemp);
      temp>>=1;
      x++;
    }

    x=x0;
    y++;
  }
}
