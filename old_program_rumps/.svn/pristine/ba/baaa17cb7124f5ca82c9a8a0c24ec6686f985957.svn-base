//------------------------------------------------------------------------------

//

// Main Program
// Application		: turboimpl_dspc
// Core						: DSP Core
// Purpose
//	- Turbo code implementation on RUMPS401
//  - > calc d, LLR

// ### Interfacing with LMS6002D, RX part ###

#include "main.h"
#include "turbo_rumps_c3.h"
//#include "libdivide_rumps.h"

#define IO_CHNLCTRL_HDR 0x1
#define IO_BITS_HDR 0x2
#define IO_LLRACK_HDR 0x3
#define IO_NOVAR_HDR 0x4
#define IO_STARTTURBO_HDR 0xa

#define DSP_LLR_HDR 0x31
#define DSP_BITSACK_HDR 0x32


const unsigned char ledpin = 0;


void main_scheduler (void);


//------------------------------------------------------------------------------

int main(void)

{
  set_trellis();

  //Timer Settings - Lime interfacing
  TM_PR = 0x1; // prescale target, 4MHz 
  TM_COMR0 = 0x1; //timer target, ch 0
  TM_COMCR = 0x3; // reset on COMR, enable interrupt
  TM_OCR = 0x6; // toggle TM_COM0/COM1 on match

  TM_CTRL = 0x3; // use PCLK, reset timer, enable timer
  TM_CTRL = 0x1; // use PCLK, start timer, enable timer
  
  // MUX - select TM_COM0 & TM_COM1
  MUXC_SELECT = 0x4;
  
  // Define variables
  short iorecv_i = 0; //count bits received from IO core
	short retllr_i = 0; //count returned LLR calculation
	short delta_i = 0; //count sent delta
	char alpha_i = 0; //count received alpha (increment)
	char beta_i = 31; //count received beta (decrement)
	
	accum iorecv_pbit[(r_win<<1)]; //store parity bit, for Le (2*windows)
	accum local_deltabuff[(r_win<<1)][16]; //local delta buffer for 2*windows
	accum local_alphabuff[r_win][8];
	accum local_betabuff[r_win][8];
	
	accum temp_sysbit;
	accum temp_ln_ap1;
	accum temp_ln_ap0;
	accum noise_var;
	
	unsigned char calcLLR;
	unsigned char iorecv_hold = 0; //flag for receiving data from IO core
	unsigned char deltasend_hold = 0; //flag for sending delta over to NCs
	unsigned char llrsend_hold = 0; //flag for sending LLR to IO core
	
	unsigned char flag_pkt_type = 0;
	
  accum_int_t temp_accumint; //temp variable for manipulating bits between accum and int type
  
  
  // *** Init Loop - Lime's initialization part ***
  while(1){
    // wait for Lime's initialization to be finished
    while(noc_NC_rxbuff0_av!=1)__NOP();
    int tempack = NC_NOC_RX_BUFF0;

    pinMode_output(ledpin);

    //init beta here since the last index is constant for all window
    for(char i=0; i<8; i++)
      local_betabuff[r_win-1][i] = -2.0794;
    
    while(noc_NC_txbuff_isfull==1)__NOP();
    NC_NOC_TX_BUFF0 = tempack;

    break;
  }

  
  // *** Main Loop - Turbo coding part ***
  while(1){
    __NOP();
  }	

	return 0;

}

  

